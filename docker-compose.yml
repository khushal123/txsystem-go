networks:
  loki:

services:
  # Kafka Broker
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      DEFAULT_TOPICS: "transactions,ledger"
    volumes:
      - ./scripts:/scripts:ro

  # PostgreSQL for accounts & balances
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # MongoDB for transaction ledger logs
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # Account Service
  # account-service:
  #   build:
  #     context: ./cmd/account-service
  #   container_name: account-service
  #   depends_on:
  #     - kafka
  #     - postgres
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_USER: banking_user
  #     POSTGRES_PASSWORD: banking_pass
  #     POSTGRES_DB: banking_db
  #     # other env variables as needed
  #   ports:
  #     - "${ACCOUNT_SERVICE_PORT}:8080"

  # Transaction Service
  # transaction-service:
  #   build:
  #     context: ./cmd/transaction-service
  #     dockerfile: Dockerfile
  #   container_name: transaction-service
  #   depends_on:
  #     - kafka
  #     - postgres
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #     POSTGRES_HOST: postgres
  #     POSTGRES_USER: banking_user
  #     POSTGRES_PASSWORD: banking_pass
  #     POSTGRES_DB: banking_db
  #   ports:
  #     - "8001:8080"

  # Ledger Service
  # ledger-service:
  #   build:
  #     context: ./cmd/ledger-service
  #     dockerfile: Dockerfile
  #   container_name: ledger-service
  #   depends_on:
  #     - kafka
  #     - mongodb
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #     MONGODB_URI: mongodb://mongodb:27017
  #   ports:
  #     - "9002:8080"


  # krakend-ce:
  #   image: devopsfaith/krakend:watch
  #   container_name: krakend
  #   ports:
  #     - "7000:8080"
  #     - "7001:8090"
  #   volumes:
  #     - ./gateway:/etc/krakend
  #   command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
  #   depends_on:
  #     - account-service
  #     - transaction-service
  #     - ledger-service

  # Grafana Loki for logging
  # loki:
  #   image: grafana/loki:latest
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   networks:
  #     - loki

  # promtail:
  #   image: grafana/promtail:latest
  #   volumes:
  #     - /var/log:/var/log
  #   command: -config.file=/etc/promtail/config.yml
  #   networks:
  #     - loki

  # grafana:
  #   environment:
  #     - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
  #   entrypoint:
  #     - sh
  #     - -euc
  #     - |
  #       mkdir -p /etc/grafana/provisioning/datasources
  #       cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
  #       apiVersion: 1
  #       datasources:
  #       - name: Loki
  #         type: loki
  #         access: proxy 
  #         orgId: 1
  #         url: http://loki:3100
  #         basicAuth: false
  #         isDefault: true
  #         version: 1
  #         editable: false
  #       EOF
  #       /run.sh
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - loki

volumes:
  postgres_data:
  mongo_data: