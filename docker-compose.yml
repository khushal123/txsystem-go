networks:
  loki:
  backend-net:  # New internal network for backend services

services:
  # Kafka Broker
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    networks:
      - backend-net
    # ports:
      # Expose only if you want external Kafka access, else remove this line
      # - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      DEFAULT_TOPICS: "transactions,ledger"
    volumes:
      - ./scripts:/scripts:ro

  # PostgreSQL for Account/Transaction
  postgres:
    image: postgres:17
    container_name: postgres
    networks:
      - backend-net
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # No ports exposed externally
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # MongoDB for Ledger logs
  mongodb:
    image: mongo
    container_name: mongodb
    networks:
      - backend-net
    # No ports exposed externally
    volumes:
      - mongo_data:/data/db

  # Account Service
  account-service:
    build:
      context: .
      dockerfile: account.Dockerfile
    container_name: account-service
    depends_on:
      - kafka
      - postgres
    networks:
      - backend-net
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Transaction Service + Consumer
  transaction-service:
    build:
      context: .
      dockerfile: transaction.Dockerfile
    container_name: transaction-service
    depends_on:
      - kafka
      - postgres
    networks:
      - backend-net
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Ledger Service + Consumer
  ledger-service:
    build:
      context: .
      dockerfile: ledger.Dockerfile
    container_name: ledger-service
    depends_on:
      - kafka
      - mongodb
    networks:
      - backend-net
    environment:
      KAFKA_BROKER: kafka:9092
      MONGODB_URI: mongodb://mongodb:27017

  # Krakend API Gateway
  krakend:
    image: devopsfaith/krakend
    container_name: krakend
    depends_on:
      - account-service
      - transaction-service
      - ledger-service
    networks:
      - backend-net
      - loki
    ports:
      - "9001:8080"  # expose only gateway externally
    volumes:
      - ./gateway:/etc/krakend/:ro
    command: ["run", "-c", "/etc/krakend/krakend.json"]

volumes:
  postgres_data:
  mongo_data:
